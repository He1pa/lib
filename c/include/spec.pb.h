/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_SPEC_PB_H_INCLUDED
#define PB_SPEC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Message representing an external package for KCL.
 kcl main.k -E pkg_name=pkg_path */
typedef struct _ExternalPkg {
    /* Name of the package. */
    pb_callback_t pkg_name;
    /* Path of the package. */
    pb_callback_t pkg_path;
} ExternalPkg;

/* Message representing a key-value argument for KCL.
 kcl main.k -D name=value */
typedef struct _Argument {
    /* Name of the argument. */
    pb_callback_t name;
    /* Value of the argument. */
    pb_callback_t value;
} Argument;

/* Message representing an error. */
typedef struct _Error {
    /* Level of the error (e.g., "Error", "Warning"). */
    pb_callback_t level;
    /* Error code. (e.g., "E1001") */
    pb_callback_t code;
    /* List of error messages. */
    pb_callback_t messages;
} Error;

/* Message for ping request arguments. */
typedef struct _Ping_Args {
    /* Value to be sent in the ping request. */
    pb_callback_t value;
} Ping_Args;

/* Message for ping response. */
typedef struct _Ping_Result {
    /* Value received in the ping response. */
    pb_callback_t value;
} Ping_Result;

/* Message for version request arguments. Empty message. */
typedef struct _GetVersion_Args { /* empty */
    char dummy_field;
} GetVersion_Args;

/* Message for version response. */
typedef struct _GetVersion_Result {
    /* KCL version. */
    pb_callback_t version;
    /* Checksum of the KCL version. */
    pb_callback_t checksum;
    /* Git Git SHA of the KCL code repo. */
    pb_callback_t git_sha;
    /* Detailed version information as a string. */
    pb_callback_t version_info;
} GetVersion_Result;

/* Message for list method request arguments. Empty message. */
typedef struct _ListMethod_Args { /* empty */
    char dummy_field;
} ListMethod_Args;

/* Message for list method response. */
typedef struct _ListMethod_Result {
    /* List of available method names. */
    pb_callback_t method_name_list;
} ListMethod_Result;

/* Message for parse file request arguments. */
typedef struct _ParseFile_Args {
    /* Path of the file to be parsed. */
    pb_callback_t path;
    /* Source code to be parsed. */
    pb_callback_t source;
    /* External packages path. */
    pb_callback_t external_pkgs;
} ParseFile_Args;

/* Message for parse file response. */
typedef struct _ParseFile_Result {
    /* Abstract Syntax Tree (AST) in JSON format. */
    pb_callback_t ast_json;
    /* File dependency paths. */
    pb_callback_t deps;
    /* List of parse errors. */
    pb_callback_t errors;
} ParseFile_Result;

/* Message for parse program request arguments. */
typedef struct _ParseProgram_Args {
    /* Paths of the program files to be parsed. */
    pb_callback_t paths;
    /* Source codes to be parsed. */
    pb_callback_t sources;
    /* External packages path. */
    pb_callback_t external_pkgs;
} ParseProgram_Args;

/* Message for parse program response. */
typedef struct _ParseProgram_Result {
    /* Abstract Syntax Tree (AST) in JSON format. */
    pb_callback_t ast_json;
    /* Returns the files in the order they should be compiled. */
    pb_callback_t paths;
    /* List of parse errors. */
    pb_callback_t errors;
} ParseProgram_Result;

/* Message for load package request arguments. */
typedef struct _LoadPackage_Args {
    /* Arguments for parsing the program. */
    bool has_parse_args;
    ParseProgram_Args parse_args;
    /* Flag indicating whether to resolve AST. */
    bool resolve_ast;
    /* Flag indicating whether to load built-in modules. */
    bool load_builtin;
    /* Flag indicating whether to include AST index. */
    bool with_ast_index;
} LoadPackage_Args;

/* Message for load package response. */
typedef struct _LoadPackage_Result {
    /* Program Abstract Syntax Tree (AST) in JSON format. */
    pb_callback_t program;
    /* Returns the files in the order they should be compiled. */
    pb_callback_t paths;
    /* List of parse errors. */
    pb_callback_t parse_errors;
    /* List of type errors. */
    pb_callback_t type_errors;
    /* Map of scopes with scope index as key. */
    pb_callback_t scopes;
    /* Map of symbols with symbol index as key. */
    pb_callback_t symbols;
    /* Map of node-symbol associations with AST index UUID as key. */
    pb_callback_t node_symbol_map;
    /* Map of symbol-node associations with symbol index as key. */
    pb_callback_t symbol_node_map;
    /* Map of fully qualified names with symbol index as key. */
    pb_callback_t fully_qualified_name_map;
    /* Map of package scope with package path as key. */
    pb_callback_t pkg_scope_map;
} LoadPackage_Result;

typedef struct _LoadPackage_Result_SymbolNodeMapEntry {
    pb_callback_t key;
    pb_callback_t value;
} LoadPackage_Result_SymbolNodeMapEntry;

/* Message for list options response. */
typedef struct _ListOptions_Result {
    /* List of available options. */
    pb_callback_t options;
} ListOptions_Result;

/* Message representing a help option. */
typedef struct _OptionHelp {
    /* Name of the option. */
    pb_callback_t name;
    /* Type of the option. */
    pb_callback_t type;
    /* Flag indicating if the option is required. */
    bool required;
    /* Default value of the option. */
    pb_callback_t default_value;
    /* Help text for the option. */
    pb_callback_t help;
} OptionHelp;

/* Message representing a symbol index. */
typedef struct _SymbolIndex {
    /* Index identifier. */
    uint64_t i;
    /* Global identifier. */
    uint64_t g;
    /* Type of the symbol or scope. */
    pb_callback_t kind;
} SymbolIndex;

typedef struct _LoadPackage_Result_NodeSymbolMapEntry {
    pb_callback_t key;
    bool has_value;
    SymbolIndex value;
} LoadPackage_Result_NodeSymbolMapEntry;

typedef struct _LoadPackage_Result_FullyQualifiedNameMapEntry {
    pb_callback_t key;
    bool has_value;
    SymbolIndex value;
} LoadPackage_Result_FullyQualifiedNameMapEntry;

/* Message representing a scope index. */
typedef struct _ScopeIndex {
    /* Index identifier. */
    uint64_t i;
    /* Global identifier. */
    uint64_t g;
    /* Type of the scope. */
    pb_callback_t kind;
} ScopeIndex;

typedef struct _LoadPackage_Result_PkgScopeMapEntry {
    pb_callback_t key;
    bool has_value;
    ScopeIndex value;
} LoadPackage_Result_PkgScopeMapEntry;

/* Message representing a scope in KCL. */
typedef struct _Scope {
    /* Type of the scope. */
    pb_callback_t kind;
    /* Parent scope. */
    bool has_parent;
    ScopeIndex parent;
    /* Owner of the scope. */
    bool has_owner;
    SymbolIndex owner;
    /* Children of the scope. */
    pb_callback_t children;
    /* Definitions in the scope. */
    pb_callback_t defs;
} Scope;

typedef struct _LoadPackage_Result_ScopesEntry {
    pb_callback_t key;
    bool has_value;
    Scope value;
} LoadPackage_Result_ScopesEntry;

/* Message for execute program request arguments. */
typedef struct _ExecProgram_Args {
    /* Working directory. */
    pb_callback_t work_dir;
    /* List of KCL filenames. */
    pb_callback_t k_filename_list;
    /* List of KCL codes. */
    pb_callback_t k_code_list;
    /* Arguments for the program. */
    pb_callback_t args;
    /* Override configurations. */
    pb_callback_t overrides;
    /* Flag to disable YAML result. */
    bool disable_yaml_result;
    /* Flag to print override AST. */
    bool print_override_ast;
    /* Flag for strict range check. */
    bool strict_range_check;
    /* Flag to disable none values. */
    bool disable_none;
    /* Verbose level. */
    int32_t verbose;
    /* Debug level. */
    int32_t debug;
    /* Flag to sort keys in YAML/JSON results. */
    bool sort_keys;
    /* External packages path. */
    pb_callback_t external_pkgs;
    /* Flag to include schema type path in results. */
    bool include_schema_type_path;
    /* Flag to compile only without execution. */
    bool compile_only;
    /* Flag to show hidden attributes. */
    bool show_hidden;
    /* Path selectors for results. */
    pb_callback_t path_selector;
    /* Flag for fast evaluation. */
    bool fast_eval;
} ExecProgram_Args;

/* Message for execute program response. */
typedef struct _ExecProgram_Result {
    /* Result in JSON format. */
    pb_callback_t json_result;
    /* Result in YAML format. */
    pb_callback_t yaml_result;
    /* Log message from execution. */
    pb_callback_t log_message;
    /* Error message from execution. */
    pb_callback_t err_message;
} ExecProgram_Result;

/* Message for build program request arguments. */
typedef struct _BuildProgram_Args {
    /* Arguments for executing the program. */
    bool has_exec_args;
    ExecProgram_Args exec_args;
    /* Output path. */
    pb_callback_t output;
} BuildProgram_Args;

/* Message for build program response. */
typedef struct _BuildProgram_Result {
    /* Path of the built program. */
    pb_callback_t path;
} BuildProgram_Result;

/* Message for execute artifact request arguments. */
typedef struct _ExecArtifact_Args {
    /* Path of the artifact. */
    pb_callback_t path;
    /* Arguments for executing the program. */
    bool has_exec_args;
    ExecProgram_Args exec_args;
} ExecArtifact_Args;

/* Message for format code request arguments. */
typedef struct _FormatCode_Args {
    /* Source code to be formatted. */
    pb_callback_t source;
} FormatCode_Args;

/* Message for format code response. */
typedef struct _FormatCode_Result {
    /* Formatted code as bytes. */
    pb_callback_t formatted;
} FormatCode_Result;

/* Message for format file path request arguments. */
typedef struct _FormatPath_Args {
    /* Path of the file to format. */
    pb_callback_t path;
} FormatPath_Args;

/* Message for format file path response. */
typedef struct _FormatPath_Result {
    /* List of changed file paths. */
    pb_callback_t changed_paths;
} FormatPath_Result;

/* Message for lint file path request arguments. */
typedef struct _LintPath_Args {
    /* Paths of the files to lint. */
    pb_callback_t paths;
} LintPath_Args;

/* Message for lint file path response. */
typedef struct _LintPath_Result {
    /* List of lint results. */
    pb_callback_t results;
} LintPath_Result;

/* Message for override file request arguments. */
typedef struct _OverrideFile_Args {
    /* Path of the file to override. */
    pb_callback_t file;
    /* List of override specifications. */
    pb_callback_t specs;
    /* List of import paths. */
    pb_callback_t import_paths;
} OverrideFile_Args;

/* Message for override file response. */
typedef struct _OverrideFile_Result {
    /* Result of the override operation. */
    bool result;
    /* List of parse errors encountered. */
    pb_callback_t parse_errors;
} OverrideFile_Result;

/* Message for list variables options. */
typedef struct _ListVariables_Options {
    /* Flag to merge program configuration. */
    bool merge_program;
} ListVariables_Options;

/* Message representing a list of variables. */
typedef struct _VariableList {
    /* List of variables. */
    pb_callback_t variables;
} VariableList;

/* Message for list variables request arguments. */
typedef struct _ListVariables_Args {
    /* Files to be processed. */
    pb_callback_t files;
    /* Specifications for variables. */
    pb_callback_t specs;
    /* Options for listing variables. */
    bool has_options;
    ListVariables_Options options;
} ListVariables_Args;

/* Message for list variables response. */
typedef struct _ListVariables_Result {
    /* Map of variable lists by file. */
    pb_callback_t variables;
    /* List of unsupported codes. */
    pb_callback_t unsupported_codes;
    /* List of parse errors encountered. */
    pb_callback_t parse_errors;
} ListVariables_Result;

typedef struct _ListVariables_Result_VariablesEntry {
    pb_callback_t key;
    bool has_value;
    VariableList value;
} ListVariables_Result_VariablesEntry;

/* Message representing a variable. */
typedef struct _Variable {
    /* Value of the variable. */
    pb_callback_t value;
    /* Type name of the variable. */
    pb_callback_t type_name;
    /* Operation symbol associated with the variable. */
    pb_callback_t op_sym;
    /* List items if the variable is a list. */
    pb_callback_t list_items;
    /* Dictionary entries if the variable is a dictionary. */
    pb_callback_t dict_entries;
} Variable;

/* Message representing a map entry. */
typedef struct _MapEntry {
    /* Key of the map entry. */
    pb_callback_t key;
    /* Value of the map entry. */
    bool has_value;
    Variable value;
} MapEntry;

/* Message for get schema type mapping request arguments. */
typedef struct _GetSchemaTypeMapping_Args {
    /* Arguments for executing the program. */
    bool has_exec_args;
    ExecProgram_Args exec_args;
    /* Name of the schema. */
    pb_callback_t schema_name;
} GetSchemaTypeMapping_Args;

/* Message for get schema type mapping response. */
typedef struct _GetSchemaTypeMapping_Result {
    /* Map of schema type mappings. */
    pb_callback_t schema_type_mapping;
} GetSchemaTypeMapping_Result;

/* Message for validate code request arguments. */
typedef struct _ValidateCode_Args {
    /* Path to the data file. */
    pb_callback_t datafile;
    /* Data content. */
    pb_callback_t data;
    /* Path to the code file. */
    pb_callback_t file;
    /* Source code content. */
    pb_callback_t code;
    /* Name of the schema. */
    pb_callback_t schema;
    /* Name of the attribute. */
    pb_callback_t attribute_name;
    /* Format of the validation (e.g., "json", "yaml"). */
    pb_callback_t format;
} ValidateCode_Args;

/* Message for validate code response. */
typedef struct _ValidateCode_Result {
    /* Flag indicating if validation was successful. */
    bool success;
    /* Error message from validation. */
    pb_callback_t err_message;
} ValidateCode_Result;

/* Message representing a position in the source code. */
typedef struct _Position {
    /* Line number. */
    int64_t line;
    /* Column number. */
    int64_t column;
    /* Filename the position refers to. */
    pb_callback_t filename;
} Position;

/* Message representing a detailed error message with a position. */
typedef struct _Message {
    /* The error message text. */
    pb_callback_t msg;
    /* The position in the source code where the error occurred. */
    bool has_pos;
    Position pos;
} Message;

/* Message for list dependency files request arguments. */
typedef struct _ListDepFiles_Args {
    /* Working directory. */
    pb_callback_t work_dir;
    /* Flag to use absolute paths. */
    bool use_abs_path;
    /* Flag to include all files. */
    bool include_all;
    /* Flag to use fast parser. */
    bool use_fast_parser;
} ListDepFiles_Args;

/* Message for list dependency files response. */
typedef struct _ListDepFiles_Result {
    /* Root package path. */
    pb_callback_t pkgroot;
    /* Package path. */
    pb_callback_t pkgpath;
    /* List of file paths in the package. */
    pb_callback_t files;
} ListDepFiles_Result;

/* Message for load settings files request arguments. */
typedef struct _LoadSettingsFiles_Args {
    /* Working directory. */
    pb_callback_t work_dir;
    /* Setting files to load. */
    pb_callback_t files;
} LoadSettingsFiles_Args;

/* Message representing KCL CLI configuration. */
typedef struct _CliConfig {
    /* List of files. */
    pb_callback_t files;
    /* Output path. */
    pb_callback_t output;
    /* List of overrides. */
    pb_callback_t overrides;
    /* Path selectors. */
    pb_callback_t path_selector;
    /* Flag for strict range check. */
    bool strict_range_check;
    /* Flag to disable none values. */
    bool disable_none;
    /* Verbose level. */
    int64_t verbose;
    /* Debug flag. */
    bool debug;
    /* Flag to sort keys in YAML/JSON results. */
    bool sort_keys;
    /* Flag to show hidden attributes. */
    bool show_hidden;
    /* Flag to include schema type path in results. */
    bool include_schema_type_path;
    /* Flag for fast evaluation. */
    bool fast_eval;
} CliConfig;

/* Message for load settings files response. */
typedef struct _LoadSettingsFiles_Result {
    /* KCL CLI configuration. */
    bool has_kcl_cli_configs;
    CliConfig kcl_cli_configs;
    /* List of KCL options as key-value pairs. */
    pb_callback_t kcl_options;
} LoadSettingsFiles_Result;

/* Message representing a key-value pair. */
typedef struct _KeyValuePair {
    /* Key of the pair. */
    pb_callback_t key;
    /* Value of the pair. */
    pb_callback_t value;
} KeyValuePair;

/* Message for rename request arguments. */
typedef struct _Rename_Args {
    /* File path to the package root. */
    pb_callback_t package_root;
    /* Path to the target symbol to be renamed. */
    pb_callback_t symbol_path;
    /* Paths to the source code files. */
    pb_callback_t file_paths;
    /* New name of the symbol. */
    pb_callback_t new_name;
} Rename_Args;

/* Message for rename response. */
typedef struct _Rename_Result {
    /* List of file paths that got changed. */
    pb_callback_t changed_files;
} Rename_Result;

/* Message for rename code request arguments. */
typedef struct _RenameCode_Args {
    /* File path to the package root. */
    pb_callback_t package_root;
    /* Path to the target symbol to be renamed. */
    pb_callback_t symbol_path;
    /* Map of source code with filename as key and code as value. */
    pb_callback_t source_codes;
    /* New name of the symbol. */
    pb_callback_t new_name;
} RenameCode_Args;

typedef struct _RenameCode_Args_SourceCodesEntry {
    pb_callback_t key;
    pb_callback_t value;
} RenameCode_Args_SourceCodesEntry;

/* Message for rename code response. */
typedef struct _RenameCode_Result {
    /* Map of changed code with filename as key and modified code as value. */
    pb_callback_t changed_codes;
} RenameCode_Result;

typedef struct _RenameCode_Result_ChangedCodesEntry {
    pb_callback_t key;
    pb_callback_t value;
} RenameCode_Result_ChangedCodesEntry;

/* Message for test request arguments. */
typedef struct _Test_Args {
    /* Execution program arguments. */
    bool has_exec_args;
    ExecProgram_Args exec_args;
    /* List of KCL package paths to be tested. */
    pb_callback_t pkg_list;
    /* Regular expression for filtering tests to run. */
    pb_callback_t run_regexp;
    /* Flag to stop the test run on the first failure. */
    bool fail_fast;
} Test_Args;

/* Message for test response. */
typedef struct _Test_Result {
    /* List of test case information. */
    pb_callback_t info;
} Test_Result;

/* Message representing information about a single test case. */
typedef struct _TestCaseInfo {
    /* Name of the test case. */
    pb_callback_t name;
    /* Error message if any. */
    pb_callback_t error;
    /* Duration of the test case in microseconds. */
    uint64_t duration;
    /* Log message from the test case. */
    pb_callback_t log_message;
} TestCaseInfo;

/* Message for update dependencies request arguments. */
typedef struct _UpdateDependencies_Args {
    /* Path to the manifest file. */
    pb_callback_t manifest_path;
    /* Flag to vendor dependencies locally. */
    bool vendor;
} UpdateDependencies_Args;

/* Message for update dependencies response. */
typedef struct _UpdateDependencies_Result {
    /* List of external packages updated. */
    pb_callback_t external_pkgs;
} UpdateDependencies_Result;

/* Message representing a KCL type. */
typedef struct _KclType {
    /* Type name (e.g., schema, dict, list, str, int, float, bool, any, union, number_multiplier). */
    pb_callback_t type;
    /* Union types if applicable. */
    pb_callback_t union_types;
    /* Default value of the type. */
    pb_callback_t default_;
    /* Name of the schema if applicable. */
    pb_callback_t schema_name;
    /* Documentation for the schema. */
    pb_callback_t schema_doc;
    /* Properties of the schema as a map with property name as key. */
    pb_callback_t properties;
    /* List of required schema properties. */
    pb_callback_t required;
    /* Key type if the KclType is a dictionary. */
    pb_callback_t key;
    /* Item type if the KclType is a list or dictionary. */
    pb_callback_t item;
    /* Line number where the type is defined. */
    pb_callback_t line;
    /* List of decorators for the schema. */
    pb_callback_t decorators;
    /* Absolute path of the file where the attribute is located. */
    pb_callback_t filename;
    /* Path of the package where the attribute is located. */
    pb_callback_t pkg_path;
    /* Documentation for the attribute. */
    pb_callback_t description;
    /* Map of examples with example name as key. */
    pb_callback_t examples;
    /* Base schema if applicable. */
    pb_callback_t base_schema;
} KclType;

/* Message representing a symbol in KCL. */
typedef struct _Symbol {
    /* Type of the symbol. */
    bool has_ty;
    KclType ty;
    /* Name of the symbol. */
    pb_callback_t name;
    /* Owner of the symbol. */
    bool has_owner;
    SymbolIndex owner;
    /* Definition of the symbol. */
    bool has_def;
    SymbolIndex def;
    /* Attributes of the symbol. */
    pb_callback_t attrs;
    /* Flag indicating if the symbol is global. */
    bool is_global;
} Symbol;

typedef struct _LoadPackage_Result_SymbolsEntry {
    pb_callback_t key;
    bool has_value;
    Symbol value;
} LoadPackage_Result_SymbolsEntry;

typedef struct _GetSchemaTypeMapping_Result_SchemaTypeMappingEntry {
    pb_callback_t key;
    bool has_value;
    KclType value;
} GetSchemaTypeMapping_Result_SchemaTypeMappingEntry;

typedef struct _KclType_PropertiesEntry {
    pb_callback_t key;
    bool has_value;
    KclType value;
} KclType_PropertiesEntry;

/* Message representing a decorator in KCL. */
typedef struct _Decorator {
    /* Name of the decorator. */
    pb_callback_t name;
    /* Arguments for the decorator. */
    pb_callback_t arguments;
    /* Keyword arguments for the decorator as a map with keyword name as key. */
    pb_callback_t keywords;
} Decorator;

typedef struct _Decorator_KeywordsEntry {
    pb_callback_t key;
    pb_callback_t value;
} Decorator_KeywordsEntry;

/* Message representing an example in KCL. */
typedef struct _Example {
    /* Short description for the example. */
    pb_callback_t summary;
    /* Long description for the example. */
    pb_callback_t description;
    /* Embedded literal example. */
    pb_callback_t value;
} Example;

typedef struct _KclType_ExamplesEntry {
    pb_callback_t key;
    bool has_value;
    Example value;
} KclType_ExamplesEntry;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ExternalPkg_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}}
#define Argument_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}}
#define Error_init_default                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Message_init_default                     {{{NULL}, NULL}, false, Position_init_default}
#define Ping_Args_init_default                   {{{NULL}, NULL}}
#define Ping_Result_init_default                 {{{NULL}, NULL}}
#define GetVersion_Args_init_default             {0}
#define GetVersion_Result_init_default           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ListMethod_Args_init_default             {0}
#define ListMethod_Result_init_default           {{{NULL}, NULL}}
#define ParseFile_Args_init_default              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseFile_Result_init_default            {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseProgram_Args_init_default           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseProgram_Result_init_default         {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Args_init_default            {false, ParseProgram_Args_init_default, 0, 0, 0}
#define LoadPackage_Result_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Result_ScopesEntry_init_default {{{NULL}, NULL}, false, Scope_init_default}
#define LoadPackage_Result_SymbolsEntry_init_default {{{NULL}, NULL}, false, Symbol_init_default}
#define LoadPackage_Result_NodeSymbolMapEntry_init_default {{{NULL}, NULL}, false, SymbolIndex_init_default}
#define LoadPackage_Result_SymbolNodeMapEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Result_FullyQualifiedNameMapEntry_init_default {{{NULL}, NULL}, false, SymbolIndex_init_default}
#define LoadPackage_Result_PkgScopeMapEntry_init_default {{{NULL}, NULL}, false, ScopeIndex_init_default}
#define ListOptions_Result_init_default          {{{NULL}, NULL}}
#define OptionHelp_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Symbol_init_default                      {false, KclType_init_default, {{NULL}, NULL}, false, SymbolIndex_init_default, false, SymbolIndex_init_default, {{NULL}, NULL}, 0}
#define Scope_init_default                       {{{NULL}, NULL}, false, ScopeIndex_init_default, false, SymbolIndex_init_default, {{NULL}, NULL}, {{NULL}, NULL}}
#define SymbolIndex_init_default                 {0, 0, {{NULL}, NULL}}
#define ScopeIndex_init_default                  {0, 0, {{NULL}, NULL}}
#define ExecProgram_Args_init_default            {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define ExecProgram_Result_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define BuildProgram_Args_init_default           {false, ExecProgram_Args_init_default, {{NULL}, NULL}}
#define BuildProgram_Result_init_default         {{{NULL}, NULL}}
#define ExecArtifact_Args_init_default           {{{NULL}, NULL}, false, ExecProgram_Args_init_default}
#define FormatCode_Args_init_default             {{{NULL}, NULL}}
#define FormatCode_Result_init_default           {{{NULL}, NULL}}
#define FormatPath_Args_init_default             {{{NULL}, NULL}}
#define FormatPath_Result_init_default           {{{NULL}, NULL}}
#define LintPath_Args_init_default               {{{NULL}, NULL}}
#define LintPath_Result_init_default             {{{NULL}, NULL}}
#define OverrideFile_Args_init_default           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define OverrideFile_Result_init_default         {0, {{NULL}, NULL}}
#define ListVariables_Options_init_default       {0}
#define VariableList_init_default                {{{NULL}, NULL}}
#define ListVariables_Args_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, false, ListVariables_Options_init_default}
#define ListVariables_Result_init_default        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ListVariables_Result_VariablesEntry_init_default {{{NULL}, NULL}, false, VariableList_init_default}
#define Variable_init_default                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define MapEntry_init_default                    {{{NULL}, NULL}, false, Variable_init_default}
#define GetSchemaTypeMapping_Args_init_default   {false, ExecProgram_Args_init_default, {{NULL}, NULL}}
#define GetSchemaTypeMapping_Result_init_default {{{NULL}, NULL}}
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_init_default {{{NULL}, NULL}, false, KclType_init_default}
#define ValidateCode_Args_init_default           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ValidateCode_Result_init_default         {0, {{NULL}, NULL}}
#define Position_init_default                    {0, 0, {{NULL}, NULL}}
#define ListDepFiles_Args_init_default           {{{NULL}, NULL}, 0, 0, 0}
#define ListDepFiles_Result_init_default         {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadSettingsFiles_Args_init_default      {{{NULL}, NULL}, {{NULL}, NULL}}
#define LoadSettingsFiles_Result_init_default    {false, CliConfig_init_default, {{NULL}, NULL}}
#define CliConfig_init_default                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, 0}
#define KeyValuePair_init_default                {{{NULL}, NULL}, {{NULL}, NULL}}
#define Rename_Args_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Rename_Result_init_default               {{{NULL}, NULL}}
#define RenameCode_Args_init_default             {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RenameCode_Args_SourceCodesEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define RenameCode_Result_init_default           {{{NULL}, NULL}}
#define RenameCode_Result_ChangedCodesEntry_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define Test_Args_init_default                   {false, ExecProgram_Args_init_default, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define Test_Result_init_default                 {{{NULL}, NULL}}
#define TestCaseInfo_init_default                {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define UpdateDependencies_Args_init_default     {{{NULL}, NULL}, 0}
#define UpdateDependencies_Result_init_default   {{{NULL}, NULL}}
#define KclType_init_default                     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define KclType_PropertiesEntry_init_default     {{{NULL}, NULL}, false, KclType_init_default}
#define KclType_ExamplesEntry_init_default       {{{NULL}, NULL}, false, Example_init_default}
#define Decorator_init_default                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Decorator_KeywordsEntry_init_default     {{{NULL}, NULL}, {{NULL}, NULL}}
#define Example_init_default                     {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ExternalPkg_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}}
#define Argument_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}}
#define Error_init_zero                          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Message_init_zero                        {{{NULL}, NULL}, false, Position_init_zero}
#define Ping_Args_init_zero                      {{{NULL}, NULL}}
#define Ping_Result_init_zero                    {{{NULL}, NULL}}
#define GetVersion_Args_init_zero                {0}
#define GetVersion_Result_init_zero              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ListMethod_Args_init_zero                {0}
#define ListMethod_Result_init_zero              {{{NULL}, NULL}}
#define ParseFile_Args_init_zero                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseFile_Result_init_zero               {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseProgram_Args_init_zero              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ParseProgram_Result_init_zero            {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Args_init_zero               {false, ParseProgram_Args_init_zero, 0, 0, 0}
#define LoadPackage_Result_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Result_ScopesEntry_init_zero {{{NULL}, NULL}, false, Scope_init_zero}
#define LoadPackage_Result_SymbolsEntry_init_zero {{{NULL}, NULL}, false, Symbol_init_zero}
#define LoadPackage_Result_NodeSymbolMapEntry_init_zero {{{NULL}, NULL}, false, SymbolIndex_init_zero}
#define LoadPackage_Result_SymbolNodeMapEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define LoadPackage_Result_FullyQualifiedNameMapEntry_init_zero {{{NULL}, NULL}, false, SymbolIndex_init_zero}
#define LoadPackage_Result_PkgScopeMapEntry_init_zero {{{NULL}, NULL}, false, ScopeIndex_init_zero}
#define ListOptions_Result_init_zero             {{{NULL}, NULL}}
#define OptionHelp_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Symbol_init_zero                         {false, KclType_init_zero, {{NULL}, NULL}, false, SymbolIndex_init_zero, false, SymbolIndex_init_zero, {{NULL}, NULL}, 0}
#define Scope_init_zero                          {{{NULL}, NULL}, false, ScopeIndex_init_zero, false, SymbolIndex_init_zero, {{NULL}, NULL}, {{NULL}, NULL}}
#define SymbolIndex_init_zero                    {0, 0, {{NULL}, NULL}}
#define ScopeIndex_init_zero                     {0, 0, {{NULL}, NULL}}
#define ExecProgram_Args_init_zero               {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}, 0}
#define ExecProgram_Result_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define BuildProgram_Args_init_zero              {false, ExecProgram_Args_init_zero, {{NULL}, NULL}}
#define BuildProgram_Result_init_zero            {{{NULL}, NULL}}
#define ExecArtifact_Args_init_zero              {{{NULL}, NULL}, false, ExecProgram_Args_init_zero}
#define FormatCode_Args_init_zero                {{{NULL}, NULL}}
#define FormatCode_Result_init_zero              {{{NULL}, NULL}}
#define FormatPath_Args_init_zero                {{{NULL}, NULL}}
#define FormatPath_Result_init_zero              {{{NULL}, NULL}}
#define LintPath_Args_init_zero                  {{{NULL}, NULL}}
#define LintPath_Result_init_zero                {{{NULL}, NULL}}
#define OverrideFile_Args_init_zero              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define OverrideFile_Result_init_zero            {0, {{NULL}, NULL}}
#define ListVariables_Options_init_zero          {0}
#define VariableList_init_zero                   {{{NULL}, NULL}}
#define ListVariables_Args_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, false, ListVariables_Options_init_zero}
#define ListVariables_Result_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ListVariables_Result_VariablesEntry_init_zero {{{NULL}, NULL}, false, VariableList_init_zero}
#define Variable_init_zero                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define MapEntry_init_zero                       {{{NULL}, NULL}, false, Variable_init_zero}
#define GetSchemaTypeMapping_Args_init_zero      {false, ExecProgram_Args_init_zero, {{NULL}, NULL}}
#define GetSchemaTypeMapping_Result_init_zero    {{{NULL}, NULL}}
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_init_zero {{{NULL}, NULL}, false, KclType_init_zero}
#define ValidateCode_Args_init_zero              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define ValidateCode_Result_init_zero            {0, {{NULL}, NULL}}
#define Position_init_zero                       {0, 0, {{NULL}, NULL}}
#define ListDepFiles_Args_init_zero              {{{NULL}, NULL}, 0, 0, 0}
#define ListDepFiles_Result_init_zero            {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define LoadSettingsFiles_Args_init_zero         {{{NULL}, NULL}, {{NULL}, NULL}}
#define LoadSettingsFiles_Result_init_zero       {false, CliConfig_init_zero, {{NULL}, NULL}}
#define CliConfig_init_zero                      {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, 0}
#define KeyValuePair_init_zero                   {{{NULL}, NULL}, {{NULL}, NULL}}
#define Rename_Args_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Rename_Result_init_zero                  {{{NULL}, NULL}}
#define RenameCode_Args_init_zero                {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RenameCode_Args_SourceCodesEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define RenameCode_Result_init_zero              {{{NULL}, NULL}}
#define RenameCode_Result_ChangedCodesEntry_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define Test_Args_init_zero                      {false, ExecProgram_Args_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define Test_Result_init_zero                    {{{NULL}, NULL}}
#define TestCaseInfo_init_zero                   {{{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define UpdateDependencies_Args_init_zero        {{{NULL}, NULL}, 0}
#define UpdateDependencies_Result_init_zero      {{{NULL}, NULL}}
#define KclType_init_zero                        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define KclType_PropertiesEntry_init_zero        {{{NULL}, NULL}, false, KclType_init_zero}
#define KclType_ExamplesEntry_init_zero          {{{NULL}, NULL}, false, Example_init_zero}
#define Decorator_init_zero                      {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Decorator_KeywordsEntry_init_zero        {{{NULL}, NULL}, {{NULL}, NULL}}
#define Example_init_zero                        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define ExternalPkg_pkg_name_tag                 1
#define ExternalPkg_pkg_path_tag                 2
#define Argument_name_tag                        1
#define Argument_value_tag                       2
#define Error_level_tag                          1
#define Error_code_tag                           2
#define Error_messages_tag                       3
#define Ping_Args_value_tag                      1
#define Ping_Result_value_tag                    1
#define GetVersion_Result_version_tag            1
#define GetVersion_Result_checksum_tag           2
#define GetVersion_Result_git_sha_tag            3
#define GetVersion_Result_version_info_tag       4
#define ListMethod_Result_method_name_list_tag   1
#define ParseFile_Args_path_tag                  1
#define ParseFile_Args_source_tag                2
#define ParseFile_Args_external_pkgs_tag         3
#define ParseFile_Result_ast_json_tag            1
#define ParseFile_Result_deps_tag                2
#define ParseFile_Result_errors_tag              3
#define ParseProgram_Args_paths_tag              1
#define ParseProgram_Args_sources_tag            2
#define ParseProgram_Args_external_pkgs_tag      3
#define ParseProgram_Result_ast_json_tag         1
#define ParseProgram_Result_paths_tag            2
#define ParseProgram_Result_errors_tag           3
#define LoadPackage_Args_parse_args_tag          1
#define LoadPackage_Args_resolve_ast_tag         2
#define LoadPackage_Args_load_builtin_tag        3
#define LoadPackage_Args_with_ast_index_tag      4
#define LoadPackage_Result_program_tag           1
#define LoadPackage_Result_paths_tag             2
#define LoadPackage_Result_parse_errors_tag      3
#define LoadPackage_Result_type_errors_tag       4
#define LoadPackage_Result_scopes_tag            5
#define LoadPackage_Result_symbols_tag           6
#define LoadPackage_Result_node_symbol_map_tag   7
#define LoadPackage_Result_symbol_node_map_tag   8
#define LoadPackage_Result_fully_qualified_name_map_tag 9
#define LoadPackage_Result_pkg_scope_map_tag     10
#define LoadPackage_Result_SymbolNodeMapEntry_key_tag 1
#define LoadPackage_Result_SymbolNodeMapEntry_value_tag 2
#define ListOptions_Result_options_tag           2
#define OptionHelp_name_tag                      1
#define OptionHelp_type_tag                      2
#define OptionHelp_required_tag                  3
#define OptionHelp_default_value_tag             4
#define OptionHelp_help_tag                      5
#define SymbolIndex_i_tag                        1
#define SymbolIndex_g_tag                        2
#define SymbolIndex_kind_tag                     3
#define LoadPackage_Result_NodeSymbolMapEntry_key_tag 1
#define LoadPackage_Result_NodeSymbolMapEntry_value_tag 2
#define LoadPackage_Result_FullyQualifiedNameMapEntry_key_tag 1
#define LoadPackage_Result_FullyQualifiedNameMapEntry_value_tag 2
#define ScopeIndex_i_tag                         1
#define ScopeIndex_g_tag                         2
#define ScopeIndex_kind_tag                      3
#define LoadPackage_Result_PkgScopeMapEntry_key_tag 1
#define LoadPackage_Result_PkgScopeMapEntry_value_tag 2
#define Scope_kind_tag                           1
#define Scope_parent_tag                         2
#define Scope_owner_tag                          3
#define Scope_children_tag                       4
#define Scope_defs_tag                           5
#define LoadPackage_Result_ScopesEntry_key_tag   1
#define LoadPackage_Result_ScopesEntry_value_tag 2
#define ExecProgram_Args_work_dir_tag            1
#define ExecProgram_Args_k_filename_list_tag     2
#define ExecProgram_Args_k_code_list_tag         3
#define ExecProgram_Args_args_tag                4
#define ExecProgram_Args_overrides_tag           5
#define ExecProgram_Args_disable_yaml_result_tag 6
#define ExecProgram_Args_print_override_ast_tag  7
#define ExecProgram_Args_strict_range_check_tag  8
#define ExecProgram_Args_disable_none_tag        9
#define ExecProgram_Args_verbose_tag             10
#define ExecProgram_Args_debug_tag               11
#define ExecProgram_Args_sort_keys_tag           12
#define ExecProgram_Args_external_pkgs_tag       13
#define ExecProgram_Args_include_schema_type_path_tag 14
#define ExecProgram_Args_compile_only_tag        15
#define ExecProgram_Args_show_hidden_tag         16
#define ExecProgram_Args_path_selector_tag       17
#define ExecProgram_Args_fast_eval_tag           18
#define ExecProgram_Result_json_result_tag       1
#define ExecProgram_Result_yaml_result_tag       2
#define ExecProgram_Result_log_message_tag       3
#define ExecProgram_Result_err_message_tag       4
#define BuildProgram_Args_exec_args_tag          1
#define BuildProgram_Args_output_tag             2
#define BuildProgram_Result_path_tag             1
#define ExecArtifact_Args_path_tag               1
#define ExecArtifact_Args_exec_args_tag          2
#define FormatCode_Args_source_tag               1
#define FormatCode_Result_formatted_tag          1
#define FormatPath_Args_path_tag                 1
#define FormatPath_Result_changed_paths_tag      1
#define LintPath_Args_paths_tag                  1
#define LintPath_Result_results_tag              1
#define OverrideFile_Args_file_tag               1
#define OverrideFile_Args_specs_tag              2
#define OverrideFile_Args_import_paths_tag       3
#define OverrideFile_Result_result_tag           1
#define OverrideFile_Result_parse_errors_tag     2
#define ListVariables_Options_merge_program_tag  1
#define VariableList_variables_tag               1
#define ListVariables_Args_files_tag             1
#define ListVariables_Args_specs_tag             2
#define ListVariables_Args_options_tag           3
#define ListVariables_Result_variables_tag       1
#define ListVariables_Result_unsupported_codes_tag 2
#define ListVariables_Result_parse_errors_tag    3
#define ListVariables_Result_VariablesEntry_key_tag 1
#define ListVariables_Result_VariablesEntry_value_tag 2
#define Variable_value_tag                       1
#define Variable_type_name_tag                   2
#define Variable_op_sym_tag                      3
#define Variable_list_items_tag                  4
#define Variable_dict_entries_tag                5
#define MapEntry_key_tag                         1
#define MapEntry_value_tag                       2
#define GetSchemaTypeMapping_Args_exec_args_tag  1
#define GetSchemaTypeMapping_Args_schema_name_tag 2
#define GetSchemaTypeMapping_Result_schema_type_mapping_tag 1
#define ValidateCode_Args_datafile_tag           1
#define ValidateCode_Args_data_tag               2
#define ValidateCode_Args_file_tag               3
#define ValidateCode_Args_code_tag               4
#define ValidateCode_Args_schema_tag             5
#define ValidateCode_Args_attribute_name_tag     6
#define ValidateCode_Args_format_tag             7
#define ValidateCode_Result_success_tag          1
#define ValidateCode_Result_err_message_tag      2
#define Position_line_tag                        1
#define Position_column_tag                      2
#define Position_filename_tag                    3
#define Message_msg_tag                          1
#define Message_pos_tag                          2
#define ListDepFiles_Args_work_dir_tag           1
#define ListDepFiles_Args_use_abs_path_tag       2
#define ListDepFiles_Args_include_all_tag        3
#define ListDepFiles_Args_use_fast_parser_tag    4
#define ListDepFiles_Result_pkgroot_tag          1
#define ListDepFiles_Result_pkgpath_tag          2
#define ListDepFiles_Result_files_tag            3
#define LoadSettingsFiles_Args_work_dir_tag      1
#define LoadSettingsFiles_Args_files_tag         2
#define CliConfig_files_tag                      1
#define CliConfig_output_tag                     2
#define CliConfig_overrides_tag                  3
#define CliConfig_path_selector_tag              4
#define CliConfig_strict_range_check_tag         5
#define CliConfig_disable_none_tag               6
#define CliConfig_verbose_tag                    7
#define CliConfig_debug_tag                      8
#define CliConfig_sort_keys_tag                  9
#define CliConfig_show_hidden_tag                10
#define CliConfig_include_schema_type_path_tag   11
#define CliConfig_fast_eval_tag                  12
#define LoadSettingsFiles_Result_kcl_cli_configs_tag 1
#define LoadSettingsFiles_Result_kcl_options_tag 2
#define KeyValuePair_key_tag                     1
#define KeyValuePair_value_tag                   2
#define Rename_Args_package_root_tag             1
#define Rename_Args_symbol_path_tag              2
#define Rename_Args_file_paths_tag               3
#define Rename_Args_new_name_tag                 4
#define Rename_Result_changed_files_tag          1
#define RenameCode_Args_package_root_tag         1
#define RenameCode_Args_symbol_path_tag          2
#define RenameCode_Args_source_codes_tag         3
#define RenameCode_Args_new_name_tag             4
#define RenameCode_Args_SourceCodesEntry_key_tag 1
#define RenameCode_Args_SourceCodesEntry_value_tag 2
#define RenameCode_Result_changed_codes_tag      1
#define RenameCode_Result_ChangedCodesEntry_key_tag 1
#define RenameCode_Result_ChangedCodesEntry_value_tag 2
#define Test_Args_exec_args_tag                  1
#define Test_Args_pkg_list_tag                   2
#define Test_Args_run_regexp_tag                 3
#define Test_Args_fail_fast_tag                  4
#define Test_Result_info_tag                     2
#define TestCaseInfo_name_tag                    1
#define TestCaseInfo_error_tag                   2
#define TestCaseInfo_duration_tag                3
#define TestCaseInfo_log_message_tag             4
#define UpdateDependencies_Args_manifest_path_tag 1
#define UpdateDependencies_Args_vendor_tag       2
#define UpdateDependencies_Result_external_pkgs_tag 3
#define KclType_type_tag                         1
#define KclType_union_types_tag                  2
#define KclType_default_tag                      3
#define KclType_schema_name_tag                  4
#define KclType_schema_doc_tag                   5
#define KclType_properties_tag                   6
#define KclType_required_tag                     7
#define KclType_key_tag                          8
#define KclType_item_tag                         9
#define KclType_line_tag                         10
#define KclType_decorators_tag                   11
#define KclType_filename_tag                     12
#define KclType_pkg_path_tag                     13
#define KclType_description_tag                  14
#define KclType_examples_tag                     15
#define KclType_base_schema_tag                  16
#define Symbol_ty_tag                            1
#define Symbol_name_tag                          2
#define Symbol_owner_tag                         3
#define Symbol_def_tag                           4
#define Symbol_attrs_tag                         5
#define Symbol_is_global_tag                     6
#define LoadPackage_Result_SymbolsEntry_key_tag  1
#define LoadPackage_Result_SymbolsEntry_value_tag 2
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_key_tag 1
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_value_tag 2
#define KclType_PropertiesEntry_key_tag          1
#define KclType_PropertiesEntry_value_tag        2
#define Decorator_name_tag                       1
#define Decorator_arguments_tag                  2
#define Decorator_keywords_tag                   3
#define Decorator_KeywordsEntry_key_tag          1
#define Decorator_KeywordsEntry_value_tag        2
#define Example_summary_tag                      1
#define Example_description_tag                  2
#define Example_value_tag                        3
#define KclType_ExamplesEntry_key_tag            1
#define KclType_ExamplesEntry_value_tag          2

/* Struct field encoding specification for nanopb */
#define ExternalPkg_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   pkg_name,          1) \
X(a, CALLBACK, SINGULAR, STRING,   pkg_path,          2)
#define ExternalPkg_CALLBACK pb_default_field_callback
#define ExternalPkg_DEFAULT NULL

#define Argument_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define Argument_CALLBACK pb_default_field_callback
#define Argument_DEFAULT NULL

#define Error_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   level,             1) \
X(a, CALLBACK, SINGULAR, STRING,   code,              2) \
X(a, CALLBACK, REPEATED, MESSAGE,  messages,          3)
#define Error_CALLBACK pb_default_field_callback
#define Error_DEFAULT NULL
#define Error_messages_MSGTYPE Message

#define Message_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   msg,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pos,               2)
#define Message_CALLBACK pb_default_field_callback
#define Message_DEFAULT NULL
#define Message_pos_MSGTYPE Position

#define Ping_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   value,             1)
#define Ping_Args_CALLBACK pb_default_field_callback
#define Ping_Args_DEFAULT NULL

#define Ping_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   value,             1)
#define Ping_Result_CALLBACK pb_default_field_callback
#define Ping_Result_DEFAULT NULL

#define GetVersion_Args_FIELDLIST(X, a) \

#define GetVersion_Args_CALLBACK NULL
#define GetVersion_Args_DEFAULT NULL

#define GetVersion_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   version,           1) \
X(a, CALLBACK, SINGULAR, STRING,   checksum,          2) \
X(a, CALLBACK, SINGULAR, STRING,   git_sha,           3) \
X(a, CALLBACK, SINGULAR, STRING,   version_info,      4)
#define GetVersion_Result_CALLBACK pb_default_field_callback
#define GetVersion_Result_DEFAULT NULL

#define ListMethod_Args_FIELDLIST(X, a) \

#define ListMethod_Args_CALLBACK NULL
#define ListMethod_Args_DEFAULT NULL

#define ListMethod_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   method_name_list,   1)
#define ListMethod_Result_CALLBACK pb_default_field_callback
#define ListMethod_Result_DEFAULT NULL

#define ParseFile_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   path,              1) \
X(a, CALLBACK, SINGULAR, STRING,   source,            2) \
X(a, CALLBACK, REPEATED, MESSAGE,  external_pkgs,     3)
#define ParseFile_Args_CALLBACK pb_default_field_callback
#define ParseFile_Args_DEFAULT NULL
#define ParseFile_Args_external_pkgs_MSGTYPE ExternalPkg

#define ParseFile_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   ast_json,          1) \
X(a, CALLBACK, REPEATED, STRING,   deps,              2) \
X(a, CALLBACK, REPEATED, MESSAGE,  errors,            3)
#define ParseFile_Result_CALLBACK pb_default_field_callback
#define ParseFile_Result_DEFAULT NULL
#define ParseFile_Result_errors_MSGTYPE Error

#define ParseProgram_Args_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   paths,             1) \
X(a, CALLBACK, REPEATED, STRING,   sources,           2) \
X(a, CALLBACK, REPEATED, MESSAGE,  external_pkgs,     3)
#define ParseProgram_Args_CALLBACK pb_default_field_callback
#define ParseProgram_Args_DEFAULT NULL
#define ParseProgram_Args_external_pkgs_MSGTYPE ExternalPkg

#define ParseProgram_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   ast_json,          1) \
X(a, CALLBACK, REPEATED, STRING,   paths,             2) \
X(a, CALLBACK, REPEATED, MESSAGE,  errors,            3)
#define ParseProgram_Result_CALLBACK pb_default_field_callback
#define ParseProgram_Result_DEFAULT NULL
#define ParseProgram_Result_errors_MSGTYPE Error

#define LoadPackage_Args_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parse_args,        1) \
X(a, STATIC,   SINGULAR, BOOL,     resolve_ast,       2) \
X(a, STATIC,   SINGULAR, BOOL,     load_builtin,      3) \
X(a, STATIC,   SINGULAR, BOOL,     with_ast_index,    4)
#define LoadPackage_Args_CALLBACK NULL
#define LoadPackage_Args_DEFAULT NULL
#define LoadPackage_Args_parse_args_MSGTYPE ParseProgram_Args

#define LoadPackage_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   program,           1) \
X(a, CALLBACK, REPEATED, STRING,   paths,             2) \
X(a, CALLBACK, REPEATED, MESSAGE,  parse_errors,      3) \
X(a, CALLBACK, REPEATED, MESSAGE,  type_errors,       4) \
X(a, CALLBACK, REPEATED, MESSAGE,  scopes,            5) \
X(a, CALLBACK, REPEATED, MESSAGE,  symbols,           6) \
X(a, CALLBACK, REPEATED, MESSAGE,  node_symbol_map,   7) \
X(a, CALLBACK, REPEATED, MESSAGE,  symbol_node_map,   8) \
X(a, CALLBACK, REPEATED, MESSAGE,  fully_qualified_name_map,   9) \
X(a, CALLBACK, REPEATED, MESSAGE,  pkg_scope_map,    10)
#define LoadPackage_Result_CALLBACK pb_default_field_callback
#define LoadPackage_Result_DEFAULT NULL
#define LoadPackage_Result_parse_errors_MSGTYPE Error
#define LoadPackage_Result_type_errors_MSGTYPE Error
#define LoadPackage_Result_scopes_MSGTYPE LoadPackage_Result_ScopesEntry
#define LoadPackage_Result_symbols_MSGTYPE LoadPackage_Result_SymbolsEntry
#define LoadPackage_Result_node_symbol_map_MSGTYPE LoadPackage_Result_NodeSymbolMapEntry
#define LoadPackage_Result_symbol_node_map_MSGTYPE LoadPackage_Result_SymbolNodeMapEntry
#define LoadPackage_Result_fully_qualified_name_map_MSGTYPE LoadPackage_Result_FullyQualifiedNameMapEntry
#define LoadPackage_Result_pkg_scope_map_MSGTYPE LoadPackage_Result_PkgScopeMapEntry

#define LoadPackage_Result_ScopesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define LoadPackage_Result_ScopesEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_ScopesEntry_DEFAULT NULL
#define LoadPackage_Result_ScopesEntry_value_MSGTYPE Scope

#define LoadPackage_Result_SymbolsEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define LoadPackage_Result_SymbolsEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_SymbolsEntry_DEFAULT NULL
#define LoadPackage_Result_SymbolsEntry_value_MSGTYPE Symbol

#define LoadPackage_Result_NodeSymbolMapEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define LoadPackage_Result_NodeSymbolMapEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_NodeSymbolMapEntry_DEFAULT NULL
#define LoadPackage_Result_NodeSymbolMapEntry_value_MSGTYPE SymbolIndex

#define LoadPackage_Result_SymbolNodeMapEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define LoadPackage_Result_SymbolNodeMapEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_SymbolNodeMapEntry_DEFAULT NULL

#define LoadPackage_Result_FullyQualifiedNameMapEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define LoadPackage_Result_FullyQualifiedNameMapEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_FullyQualifiedNameMapEntry_DEFAULT NULL
#define LoadPackage_Result_FullyQualifiedNameMapEntry_value_MSGTYPE SymbolIndex

#define LoadPackage_Result_PkgScopeMapEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define LoadPackage_Result_PkgScopeMapEntry_CALLBACK pb_default_field_callback
#define LoadPackage_Result_PkgScopeMapEntry_DEFAULT NULL
#define LoadPackage_Result_PkgScopeMapEntry_value_MSGTYPE ScopeIndex

#define ListOptions_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  options,           2)
#define ListOptions_Result_CALLBACK pb_default_field_callback
#define ListOptions_Result_DEFAULT NULL
#define ListOptions_Result_options_MSGTYPE OptionHelp

#define OptionHelp_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   type,              2) \
X(a, STATIC,   SINGULAR, BOOL,     required,          3) \
X(a, CALLBACK, SINGULAR, STRING,   default_value,     4) \
X(a, CALLBACK, SINGULAR, STRING,   help,              5)
#define OptionHelp_CALLBACK pb_default_field_callback
#define OptionHelp_DEFAULT NULL

#define Symbol_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ty,                1) \
X(a, CALLBACK, SINGULAR, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  owner,             3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  def,               4) \
X(a, CALLBACK, REPEATED, MESSAGE,  attrs,             5) \
X(a, STATIC,   SINGULAR, BOOL,     is_global,         6)
#define Symbol_CALLBACK pb_default_field_callback
#define Symbol_DEFAULT NULL
#define Symbol_ty_MSGTYPE KclType
#define Symbol_owner_MSGTYPE SymbolIndex
#define Symbol_def_MSGTYPE SymbolIndex
#define Symbol_attrs_MSGTYPE SymbolIndex

#define Scope_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   kind,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parent,            2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  owner,             3) \
X(a, CALLBACK, REPEATED, MESSAGE,  children,          4) \
X(a, CALLBACK, REPEATED, MESSAGE,  defs,              5)
#define Scope_CALLBACK pb_default_field_callback
#define Scope_DEFAULT NULL
#define Scope_parent_MSGTYPE ScopeIndex
#define Scope_owner_MSGTYPE SymbolIndex
#define Scope_children_MSGTYPE ScopeIndex
#define Scope_defs_MSGTYPE SymbolIndex

#define SymbolIndex_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   i,                 1) \
X(a, STATIC,   SINGULAR, UINT64,   g,                 2) \
X(a, CALLBACK, SINGULAR, STRING,   kind,              3)
#define SymbolIndex_CALLBACK pb_default_field_callback
#define SymbolIndex_DEFAULT NULL

#define ScopeIndex_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   i,                 1) \
X(a, STATIC,   SINGULAR, UINT64,   g,                 2) \
X(a, CALLBACK, SINGULAR, STRING,   kind,              3)
#define ScopeIndex_CALLBACK pb_default_field_callback
#define ScopeIndex_DEFAULT NULL

#define ExecProgram_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   work_dir,          1) \
X(a, CALLBACK, REPEATED, STRING,   k_filename_list,   2) \
X(a, CALLBACK, REPEATED, STRING,   k_code_list,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  args,              4) \
X(a, CALLBACK, REPEATED, STRING,   overrides,         5) \
X(a, STATIC,   SINGULAR, BOOL,     disable_yaml_result,   6) \
X(a, STATIC,   SINGULAR, BOOL,     print_override_ast,   7) \
X(a, STATIC,   SINGULAR, BOOL,     strict_range_check,   8) \
X(a, STATIC,   SINGULAR, BOOL,     disable_none,      9) \
X(a, STATIC,   SINGULAR, INT32,    verbose,          10) \
X(a, STATIC,   SINGULAR, INT32,    debug,            11) \
X(a, STATIC,   SINGULAR, BOOL,     sort_keys,        12) \
X(a, CALLBACK, REPEATED, MESSAGE,  external_pkgs,    13) \
X(a, STATIC,   SINGULAR, BOOL,     include_schema_type_path,  14) \
X(a, STATIC,   SINGULAR, BOOL,     compile_only,     15) \
X(a, STATIC,   SINGULAR, BOOL,     show_hidden,      16) \
X(a, CALLBACK, REPEATED, STRING,   path_selector,    17) \
X(a, STATIC,   SINGULAR, BOOL,     fast_eval,        18)
#define ExecProgram_Args_CALLBACK pb_default_field_callback
#define ExecProgram_Args_DEFAULT NULL
#define ExecProgram_Args_args_MSGTYPE Argument
#define ExecProgram_Args_external_pkgs_MSGTYPE ExternalPkg

#define ExecProgram_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   json_result,       1) \
X(a, CALLBACK, SINGULAR, STRING,   yaml_result,       2) \
X(a, CALLBACK, SINGULAR, STRING,   log_message,       3) \
X(a, CALLBACK, SINGULAR, STRING,   err_message,       4)
#define ExecProgram_Result_CALLBACK pb_default_field_callback
#define ExecProgram_Result_DEFAULT NULL

#define BuildProgram_Args_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  exec_args,         1) \
X(a, CALLBACK, SINGULAR, STRING,   output,            2)
#define BuildProgram_Args_CALLBACK pb_default_field_callback
#define BuildProgram_Args_DEFAULT NULL
#define BuildProgram_Args_exec_args_MSGTYPE ExecProgram_Args

#define BuildProgram_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   path,              1)
#define BuildProgram_Result_CALLBACK pb_default_field_callback
#define BuildProgram_Result_DEFAULT NULL

#define ExecArtifact_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   path,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  exec_args,         2)
#define ExecArtifact_Args_CALLBACK pb_default_field_callback
#define ExecArtifact_Args_DEFAULT NULL
#define ExecArtifact_Args_exec_args_MSGTYPE ExecProgram_Args

#define FormatCode_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   source,            1)
#define FormatCode_Args_CALLBACK pb_default_field_callback
#define FormatCode_Args_DEFAULT NULL

#define FormatCode_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    formatted,         1)
#define FormatCode_Result_CALLBACK pb_default_field_callback
#define FormatCode_Result_DEFAULT NULL

#define FormatPath_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   path,              1)
#define FormatPath_Args_CALLBACK pb_default_field_callback
#define FormatPath_Args_DEFAULT NULL

#define FormatPath_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   changed_paths,     1)
#define FormatPath_Result_CALLBACK pb_default_field_callback
#define FormatPath_Result_DEFAULT NULL

#define LintPath_Args_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   paths,             1)
#define LintPath_Args_CALLBACK pb_default_field_callback
#define LintPath_Args_DEFAULT NULL

#define LintPath_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   results,           1)
#define LintPath_Result_CALLBACK pb_default_field_callback
#define LintPath_Result_DEFAULT NULL

#define OverrideFile_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   file,              1) \
X(a, CALLBACK, REPEATED, STRING,   specs,             2) \
X(a, CALLBACK, REPEATED, STRING,   import_paths,      3)
#define OverrideFile_Args_CALLBACK pb_default_field_callback
#define OverrideFile_Args_DEFAULT NULL

#define OverrideFile_Result_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     result,            1) \
X(a, CALLBACK, REPEATED, MESSAGE,  parse_errors,      2)
#define OverrideFile_Result_CALLBACK pb_default_field_callback
#define OverrideFile_Result_DEFAULT NULL
#define OverrideFile_Result_parse_errors_MSGTYPE Error

#define ListVariables_Options_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     merge_program,     1)
#define ListVariables_Options_CALLBACK NULL
#define ListVariables_Options_DEFAULT NULL

#define VariableList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  variables,         1)
#define VariableList_CALLBACK pb_default_field_callback
#define VariableList_DEFAULT NULL
#define VariableList_variables_MSGTYPE Variable

#define ListVariables_Args_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   files,             1) \
X(a, CALLBACK, REPEATED, STRING,   specs,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  options,           3)
#define ListVariables_Args_CALLBACK pb_default_field_callback
#define ListVariables_Args_DEFAULT NULL
#define ListVariables_Args_options_MSGTYPE ListVariables_Options

#define ListVariables_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  variables,         1) \
X(a, CALLBACK, REPEATED, STRING,   unsupported_codes,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  parse_errors,      3)
#define ListVariables_Result_CALLBACK pb_default_field_callback
#define ListVariables_Result_DEFAULT NULL
#define ListVariables_Result_variables_MSGTYPE ListVariables_Result_VariablesEntry
#define ListVariables_Result_parse_errors_MSGTYPE Error

#define ListVariables_Result_VariablesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define ListVariables_Result_VariablesEntry_CALLBACK pb_default_field_callback
#define ListVariables_Result_VariablesEntry_DEFAULT NULL
#define ListVariables_Result_VariablesEntry_value_MSGTYPE VariableList

#define Variable_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   value,             1) \
X(a, CALLBACK, SINGULAR, STRING,   type_name,         2) \
X(a, CALLBACK, SINGULAR, STRING,   op_sym,            3) \
X(a, CALLBACK, REPEATED, MESSAGE,  list_items,        4) \
X(a, CALLBACK, REPEATED, MESSAGE,  dict_entries,      5)
#define Variable_CALLBACK pb_default_field_callback
#define Variable_DEFAULT NULL
#define Variable_list_items_MSGTYPE Variable
#define Variable_dict_entries_MSGTYPE MapEntry

#define MapEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define MapEntry_CALLBACK pb_default_field_callback
#define MapEntry_DEFAULT NULL
#define MapEntry_value_MSGTYPE Variable

#define GetSchemaTypeMapping_Args_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  exec_args,         1) \
X(a, CALLBACK, SINGULAR, STRING,   schema_name,       2)
#define GetSchemaTypeMapping_Args_CALLBACK pb_default_field_callback
#define GetSchemaTypeMapping_Args_DEFAULT NULL
#define GetSchemaTypeMapping_Args_exec_args_MSGTYPE ExecProgram_Args

#define GetSchemaTypeMapping_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  schema_type_mapping,   1)
#define GetSchemaTypeMapping_Result_CALLBACK pb_default_field_callback
#define GetSchemaTypeMapping_Result_DEFAULT NULL
#define GetSchemaTypeMapping_Result_schema_type_mapping_MSGTYPE GetSchemaTypeMapping_Result_SchemaTypeMappingEntry

#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_CALLBACK pb_default_field_callback
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_DEFAULT NULL
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_value_MSGTYPE KclType

#define ValidateCode_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   datafile,          1) \
X(a, CALLBACK, SINGULAR, STRING,   data,              2) \
X(a, CALLBACK, SINGULAR, STRING,   file,              3) \
X(a, CALLBACK, SINGULAR, STRING,   code,              4) \
X(a, CALLBACK, SINGULAR, STRING,   schema,            5) \
X(a, CALLBACK, SINGULAR, STRING,   attribute_name,    6) \
X(a, CALLBACK, SINGULAR, STRING,   format,            7)
#define ValidateCode_Args_CALLBACK pb_default_field_callback
#define ValidateCode_Args_DEFAULT NULL

#define ValidateCode_Result_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     success,           1) \
X(a, CALLBACK, SINGULAR, STRING,   err_message,       2)
#define ValidateCode_Result_CALLBACK pb_default_field_callback
#define ValidateCode_Result_DEFAULT NULL

#define Position_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    line,              1) \
X(a, STATIC,   SINGULAR, INT64,    column,            2) \
X(a, CALLBACK, SINGULAR, STRING,   filename,          3)
#define Position_CALLBACK pb_default_field_callback
#define Position_DEFAULT NULL

#define ListDepFiles_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   work_dir,          1) \
X(a, STATIC,   SINGULAR, BOOL,     use_abs_path,      2) \
X(a, STATIC,   SINGULAR, BOOL,     include_all,       3) \
X(a, STATIC,   SINGULAR, BOOL,     use_fast_parser,   4)
#define ListDepFiles_Args_CALLBACK pb_default_field_callback
#define ListDepFiles_Args_DEFAULT NULL

#define ListDepFiles_Result_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   pkgroot,           1) \
X(a, CALLBACK, SINGULAR, STRING,   pkgpath,           2) \
X(a, CALLBACK, REPEATED, STRING,   files,             3)
#define ListDepFiles_Result_CALLBACK pb_default_field_callback
#define ListDepFiles_Result_DEFAULT NULL

#define LoadSettingsFiles_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   work_dir,          1) \
X(a, CALLBACK, REPEATED, STRING,   files,             2)
#define LoadSettingsFiles_Args_CALLBACK pb_default_field_callback
#define LoadSettingsFiles_Args_DEFAULT NULL

#define LoadSettingsFiles_Result_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  kcl_cli_configs,   1) \
X(a, CALLBACK, REPEATED, MESSAGE,  kcl_options,       2)
#define LoadSettingsFiles_Result_CALLBACK pb_default_field_callback
#define LoadSettingsFiles_Result_DEFAULT NULL
#define LoadSettingsFiles_Result_kcl_cli_configs_MSGTYPE CliConfig
#define LoadSettingsFiles_Result_kcl_options_MSGTYPE KeyValuePair

#define CliConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   files,             1) \
X(a, CALLBACK, SINGULAR, STRING,   output,            2) \
X(a, CALLBACK, REPEATED, STRING,   overrides,         3) \
X(a, CALLBACK, REPEATED, STRING,   path_selector,     4) \
X(a, STATIC,   SINGULAR, BOOL,     strict_range_check,   5) \
X(a, STATIC,   SINGULAR, BOOL,     disable_none,      6) \
X(a, STATIC,   SINGULAR, INT64,    verbose,           7) \
X(a, STATIC,   SINGULAR, BOOL,     debug,             8) \
X(a, STATIC,   SINGULAR, BOOL,     sort_keys,         9) \
X(a, STATIC,   SINGULAR, BOOL,     show_hidden,      10) \
X(a, STATIC,   SINGULAR, BOOL,     include_schema_type_path,  11) \
X(a, STATIC,   SINGULAR, BOOL,     fast_eval,        12)
#define CliConfig_CALLBACK pb_default_field_callback
#define CliConfig_DEFAULT NULL

#define KeyValuePair_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define KeyValuePair_CALLBACK pb_default_field_callback
#define KeyValuePair_DEFAULT NULL

#define Rename_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   package_root,      1) \
X(a, CALLBACK, SINGULAR, STRING,   symbol_path,       2) \
X(a, CALLBACK, REPEATED, STRING,   file_paths,        3) \
X(a, CALLBACK, SINGULAR, STRING,   new_name,          4)
#define Rename_Args_CALLBACK pb_default_field_callback
#define Rename_Args_DEFAULT NULL

#define Rename_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   changed_files,     1)
#define Rename_Result_CALLBACK pb_default_field_callback
#define Rename_Result_DEFAULT NULL

#define RenameCode_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   package_root,      1) \
X(a, CALLBACK, SINGULAR, STRING,   symbol_path,       2) \
X(a, CALLBACK, REPEATED, MESSAGE,  source_codes,      3) \
X(a, CALLBACK, SINGULAR, STRING,   new_name,          4)
#define RenameCode_Args_CALLBACK pb_default_field_callback
#define RenameCode_Args_DEFAULT NULL
#define RenameCode_Args_source_codes_MSGTYPE RenameCode_Args_SourceCodesEntry

#define RenameCode_Args_SourceCodesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define RenameCode_Args_SourceCodesEntry_CALLBACK pb_default_field_callback
#define RenameCode_Args_SourceCodesEntry_DEFAULT NULL

#define RenameCode_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  changed_codes,     1)
#define RenameCode_Result_CALLBACK pb_default_field_callback
#define RenameCode_Result_DEFAULT NULL
#define RenameCode_Result_changed_codes_MSGTYPE RenameCode_Result_ChangedCodesEntry

#define RenameCode_Result_ChangedCodesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define RenameCode_Result_ChangedCodesEntry_CALLBACK pb_default_field_callback
#define RenameCode_Result_ChangedCodesEntry_DEFAULT NULL

#define Test_Args_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  exec_args,         1) \
X(a, CALLBACK, REPEATED, STRING,   pkg_list,          2) \
X(a, CALLBACK, SINGULAR, STRING,   run_regexp,        3) \
X(a, STATIC,   SINGULAR, BOOL,     fail_fast,         4)
#define Test_Args_CALLBACK pb_default_field_callback
#define Test_Args_DEFAULT NULL
#define Test_Args_exec_args_MSGTYPE ExecProgram_Args

#define Test_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  info,              2)
#define Test_Result_CALLBACK pb_default_field_callback
#define Test_Result_DEFAULT NULL
#define Test_Result_info_MSGTYPE TestCaseInfo

#define TestCaseInfo_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   error,             2) \
X(a, STATIC,   SINGULAR, UINT64,   duration,          3) \
X(a, CALLBACK, SINGULAR, STRING,   log_message,       4)
#define TestCaseInfo_CALLBACK pb_default_field_callback
#define TestCaseInfo_DEFAULT NULL

#define UpdateDependencies_Args_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   manifest_path,     1) \
X(a, STATIC,   SINGULAR, BOOL,     vendor,            2)
#define UpdateDependencies_Args_CALLBACK pb_default_field_callback
#define UpdateDependencies_Args_DEFAULT NULL

#define UpdateDependencies_Result_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  external_pkgs,     3)
#define UpdateDependencies_Result_CALLBACK pb_default_field_callback
#define UpdateDependencies_Result_DEFAULT NULL
#define UpdateDependencies_Result_external_pkgs_MSGTYPE ExternalPkg

#define KclType_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   type,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  union_types,       2) \
X(a, CALLBACK, SINGULAR, STRING,   default_,           3) \
X(a, CALLBACK, SINGULAR, STRING,   schema_name,       4) \
X(a, CALLBACK, SINGULAR, STRING,   schema_doc,        5) \
X(a, CALLBACK, REPEATED, MESSAGE,  properties,        6) \
X(a, CALLBACK, REPEATED, STRING,   required,          7) \
X(a, CALLBACK, OPTIONAL, MESSAGE,  key,               8) \
X(a, CALLBACK, OPTIONAL, MESSAGE,  item,              9) \
X(a, CALLBACK, SINGULAR, INT32,    line,             10) \
X(a, CALLBACK, REPEATED, MESSAGE,  decorators,       11) \
X(a, CALLBACK, SINGULAR, STRING,   filename,         12) \
X(a, CALLBACK, SINGULAR, STRING,   pkg_path,         13) \
X(a, CALLBACK, SINGULAR, STRING,   description,      14) \
X(a, CALLBACK, REPEATED, MESSAGE,  examples,         15) \
X(a, CALLBACK, OPTIONAL, MESSAGE,  base_schema,      16)
#define KclType_CALLBACK pb_default_field_callback
#define KclType_DEFAULT NULL
#define KclType_union_types_MSGTYPE KclType
#define KclType_properties_MSGTYPE KclType_PropertiesEntry
#define KclType_key_MSGTYPE KclType
#define KclType_item_MSGTYPE KclType
#define KclType_decorators_MSGTYPE Decorator
#define KclType_examples_MSGTYPE KclType_ExamplesEntry
#define KclType_base_schema_MSGTYPE KclType

#define KclType_PropertiesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define KclType_PropertiesEntry_CALLBACK pb_default_field_callback
#define KclType_PropertiesEntry_DEFAULT NULL
#define KclType_PropertiesEntry_value_MSGTYPE KclType

#define KclType_ExamplesEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define KclType_ExamplesEntry_CALLBACK pb_default_field_callback
#define KclType_ExamplesEntry_DEFAULT NULL
#define KclType_ExamplesEntry_value_MSGTYPE Example

#define Decorator_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, REPEATED, STRING,   arguments,         2) \
X(a, CALLBACK, REPEATED, MESSAGE,  keywords,          3)
#define Decorator_CALLBACK pb_default_field_callback
#define Decorator_DEFAULT NULL
#define Decorator_keywords_MSGTYPE Decorator_KeywordsEntry

#define Decorator_KeywordsEntry_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define Decorator_KeywordsEntry_CALLBACK pb_default_field_callback
#define Decorator_KeywordsEntry_DEFAULT NULL

#define Example_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   summary,           1) \
X(a, CALLBACK, SINGULAR, STRING,   description,       2) \
X(a, CALLBACK, SINGULAR, STRING,   value,             3)
#define Example_CALLBACK pb_default_field_callback
#define Example_DEFAULT NULL

extern const pb_msgdesc_t ExternalPkg_msg;
extern const pb_msgdesc_t Argument_msg;
extern const pb_msgdesc_t Error_msg;
extern const pb_msgdesc_t Message_msg;
extern const pb_msgdesc_t Ping_Args_msg;
extern const pb_msgdesc_t Ping_Result_msg;
extern const pb_msgdesc_t GetVersion_Args_msg;
extern const pb_msgdesc_t GetVersion_Result_msg;
extern const pb_msgdesc_t ListMethod_Args_msg;
extern const pb_msgdesc_t ListMethod_Result_msg;
extern const pb_msgdesc_t ParseFile_Args_msg;
extern const pb_msgdesc_t ParseFile_Result_msg;
extern const pb_msgdesc_t ParseProgram_Args_msg;
extern const pb_msgdesc_t ParseProgram_Result_msg;
extern const pb_msgdesc_t LoadPackage_Args_msg;
extern const pb_msgdesc_t LoadPackage_Result_msg;
extern const pb_msgdesc_t LoadPackage_Result_ScopesEntry_msg;
extern const pb_msgdesc_t LoadPackage_Result_SymbolsEntry_msg;
extern const pb_msgdesc_t LoadPackage_Result_NodeSymbolMapEntry_msg;
extern const pb_msgdesc_t LoadPackage_Result_SymbolNodeMapEntry_msg;
extern const pb_msgdesc_t LoadPackage_Result_FullyQualifiedNameMapEntry_msg;
extern const pb_msgdesc_t LoadPackage_Result_PkgScopeMapEntry_msg;
extern const pb_msgdesc_t ListOptions_Result_msg;
extern const pb_msgdesc_t OptionHelp_msg;
extern const pb_msgdesc_t Symbol_msg;
extern const pb_msgdesc_t Scope_msg;
extern const pb_msgdesc_t SymbolIndex_msg;
extern const pb_msgdesc_t ScopeIndex_msg;
extern const pb_msgdesc_t ExecProgram_Args_msg;
extern const pb_msgdesc_t ExecProgram_Result_msg;
extern const pb_msgdesc_t BuildProgram_Args_msg;
extern const pb_msgdesc_t BuildProgram_Result_msg;
extern const pb_msgdesc_t ExecArtifact_Args_msg;
extern const pb_msgdesc_t FormatCode_Args_msg;
extern const pb_msgdesc_t FormatCode_Result_msg;
extern const pb_msgdesc_t FormatPath_Args_msg;
extern const pb_msgdesc_t FormatPath_Result_msg;
extern const pb_msgdesc_t LintPath_Args_msg;
extern const pb_msgdesc_t LintPath_Result_msg;
extern const pb_msgdesc_t OverrideFile_Args_msg;
extern const pb_msgdesc_t OverrideFile_Result_msg;
extern const pb_msgdesc_t ListVariables_Options_msg;
extern const pb_msgdesc_t VariableList_msg;
extern const pb_msgdesc_t ListVariables_Args_msg;
extern const pb_msgdesc_t ListVariables_Result_msg;
extern const pb_msgdesc_t ListVariables_Result_VariablesEntry_msg;
extern const pb_msgdesc_t Variable_msg;
extern const pb_msgdesc_t MapEntry_msg;
extern const pb_msgdesc_t GetSchemaTypeMapping_Args_msg;
extern const pb_msgdesc_t GetSchemaTypeMapping_Result_msg;
extern const pb_msgdesc_t GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_msg;
extern const pb_msgdesc_t ValidateCode_Args_msg;
extern const pb_msgdesc_t ValidateCode_Result_msg;
extern const pb_msgdesc_t Position_msg;
extern const pb_msgdesc_t ListDepFiles_Args_msg;
extern const pb_msgdesc_t ListDepFiles_Result_msg;
extern const pb_msgdesc_t LoadSettingsFiles_Args_msg;
extern const pb_msgdesc_t LoadSettingsFiles_Result_msg;
extern const pb_msgdesc_t CliConfig_msg;
extern const pb_msgdesc_t KeyValuePair_msg;
extern const pb_msgdesc_t Rename_Args_msg;
extern const pb_msgdesc_t Rename_Result_msg;
extern const pb_msgdesc_t RenameCode_Args_msg;
extern const pb_msgdesc_t RenameCode_Args_SourceCodesEntry_msg;
extern const pb_msgdesc_t RenameCode_Result_msg;
extern const pb_msgdesc_t RenameCode_Result_ChangedCodesEntry_msg;
extern const pb_msgdesc_t Test_Args_msg;
extern const pb_msgdesc_t Test_Result_msg;
extern const pb_msgdesc_t TestCaseInfo_msg;
extern const pb_msgdesc_t UpdateDependencies_Args_msg;
extern const pb_msgdesc_t UpdateDependencies_Result_msg;
extern const pb_msgdesc_t KclType_msg;
extern const pb_msgdesc_t KclType_PropertiesEntry_msg;
extern const pb_msgdesc_t KclType_ExamplesEntry_msg;
extern const pb_msgdesc_t Decorator_msg;
extern const pb_msgdesc_t Decorator_KeywordsEntry_msg;
extern const pb_msgdesc_t Example_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ExternalPkg_fields &ExternalPkg_msg
#define Argument_fields &Argument_msg
#define Error_fields &Error_msg
#define Message_fields &Message_msg
#define Ping_Args_fields &Ping_Args_msg
#define Ping_Result_fields &Ping_Result_msg
#define GetVersion_Args_fields &GetVersion_Args_msg
#define GetVersion_Result_fields &GetVersion_Result_msg
#define ListMethod_Args_fields &ListMethod_Args_msg
#define ListMethod_Result_fields &ListMethod_Result_msg
#define ParseFile_Args_fields &ParseFile_Args_msg
#define ParseFile_Result_fields &ParseFile_Result_msg
#define ParseProgram_Args_fields &ParseProgram_Args_msg
#define ParseProgram_Result_fields &ParseProgram_Result_msg
#define LoadPackage_Args_fields &LoadPackage_Args_msg
#define LoadPackage_Result_fields &LoadPackage_Result_msg
#define LoadPackage_Result_ScopesEntry_fields &LoadPackage_Result_ScopesEntry_msg
#define LoadPackage_Result_SymbolsEntry_fields &LoadPackage_Result_SymbolsEntry_msg
#define LoadPackage_Result_NodeSymbolMapEntry_fields &LoadPackage_Result_NodeSymbolMapEntry_msg
#define LoadPackage_Result_SymbolNodeMapEntry_fields &LoadPackage_Result_SymbolNodeMapEntry_msg
#define LoadPackage_Result_FullyQualifiedNameMapEntry_fields &LoadPackage_Result_FullyQualifiedNameMapEntry_msg
#define LoadPackage_Result_PkgScopeMapEntry_fields &LoadPackage_Result_PkgScopeMapEntry_msg
#define ListOptions_Result_fields &ListOptions_Result_msg
#define OptionHelp_fields &OptionHelp_msg
#define Symbol_fields &Symbol_msg
#define Scope_fields &Scope_msg
#define SymbolIndex_fields &SymbolIndex_msg
#define ScopeIndex_fields &ScopeIndex_msg
#define ExecProgram_Args_fields &ExecProgram_Args_msg
#define ExecProgram_Result_fields &ExecProgram_Result_msg
#define BuildProgram_Args_fields &BuildProgram_Args_msg
#define BuildProgram_Result_fields &BuildProgram_Result_msg
#define ExecArtifact_Args_fields &ExecArtifact_Args_msg
#define FormatCode_Args_fields &FormatCode_Args_msg
#define FormatCode_Result_fields &FormatCode_Result_msg
#define FormatPath_Args_fields &FormatPath_Args_msg
#define FormatPath_Result_fields &FormatPath_Result_msg
#define LintPath_Args_fields &LintPath_Args_msg
#define LintPath_Result_fields &LintPath_Result_msg
#define OverrideFile_Args_fields &OverrideFile_Args_msg
#define OverrideFile_Result_fields &OverrideFile_Result_msg
#define ListVariables_Options_fields &ListVariables_Options_msg
#define VariableList_fields &VariableList_msg
#define ListVariables_Args_fields &ListVariables_Args_msg
#define ListVariables_Result_fields &ListVariables_Result_msg
#define ListVariables_Result_VariablesEntry_fields &ListVariables_Result_VariablesEntry_msg
#define Variable_fields &Variable_msg
#define MapEntry_fields &MapEntry_msg
#define GetSchemaTypeMapping_Args_fields &GetSchemaTypeMapping_Args_msg
#define GetSchemaTypeMapping_Result_fields &GetSchemaTypeMapping_Result_msg
#define GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_fields &GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_msg
#define ValidateCode_Args_fields &ValidateCode_Args_msg
#define ValidateCode_Result_fields &ValidateCode_Result_msg
#define Position_fields &Position_msg
#define ListDepFiles_Args_fields &ListDepFiles_Args_msg
#define ListDepFiles_Result_fields &ListDepFiles_Result_msg
#define LoadSettingsFiles_Args_fields &LoadSettingsFiles_Args_msg
#define LoadSettingsFiles_Result_fields &LoadSettingsFiles_Result_msg
#define CliConfig_fields &CliConfig_msg
#define KeyValuePair_fields &KeyValuePair_msg
#define Rename_Args_fields &Rename_Args_msg
#define Rename_Result_fields &Rename_Result_msg
#define RenameCode_Args_fields &RenameCode_Args_msg
#define RenameCode_Args_SourceCodesEntry_fields &RenameCode_Args_SourceCodesEntry_msg
#define RenameCode_Result_fields &RenameCode_Result_msg
#define RenameCode_Result_ChangedCodesEntry_fields &RenameCode_Result_ChangedCodesEntry_msg
#define Test_Args_fields &Test_Args_msg
#define Test_Result_fields &Test_Result_msg
#define TestCaseInfo_fields &TestCaseInfo_msg
#define UpdateDependencies_Args_fields &UpdateDependencies_Args_msg
#define UpdateDependencies_Result_fields &UpdateDependencies_Result_msg
#define KclType_fields &KclType_msg
#define KclType_PropertiesEntry_fields &KclType_PropertiesEntry_msg
#define KclType_ExamplesEntry_fields &KclType_ExamplesEntry_msg
#define Decorator_fields &Decorator_msg
#define Decorator_KeywordsEntry_fields &Decorator_KeywordsEntry_msg
#define Example_fields &Example_msg

/* Maximum encoded size of messages (where known) */
/* ExternalPkg_size depends on runtime parameters */
/* Argument_size depends on runtime parameters */
/* Error_size depends on runtime parameters */
/* Message_size depends on runtime parameters */
/* Ping_Args_size depends on runtime parameters */
/* Ping_Result_size depends on runtime parameters */
/* GetVersion_Result_size depends on runtime parameters */
/* ListMethod_Result_size depends on runtime parameters */
/* ParseFile_Args_size depends on runtime parameters */
/* ParseFile_Result_size depends on runtime parameters */
/* ParseProgram_Args_size depends on runtime parameters */
/* ParseProgram_Result_size depends on runtime parameters */
/* LoadPackage_Args_size depends on runtime parameters */
/* LoadPackage_Result_size depends on runtime parameters */
/* LoadPackage_Result_ScopesEntry_size depends on runtime parameters */
/* LoadPackage_Result_SymbolsEntry_size depends on runtime parameters */
/* LoadPackage_Result_NodeSymbolMapEntry_size depends on runtime parameters */
/* LoadPackage_Result_SymbolNodeMapEntry_size depends on runtime parameters */
/* LoadPackage_Result_FullyQualifiedNameMapEntry_size depends on runtime parameters */
/* LoadPackage_Result_PkgScopeMapEntry_size depends on runtime parameters */
/* ListOptions_Result_size depends on runtime parameters */
/* OptionHelp_size depends on runtime parameters */
/* Symbol_size depends on runtime parameters */
/* Scope_size depends on runtime parameters */
/* SymbolIndex_size depends on runtime parameters */
/* ScopeIndex_size depends on runtime parameters */
/* ExecProgram_Args_size depends on runtime parameters */
/* ExecProgram_Result_size depends on runtime parameters */
/* BuildProgram_Args_size depends on runtime parameters */
/* BuildProgram_Result_size depends on runtime parameters */
/* ExecArtifact_Args_size depends on runtime parameters */
/* FormatCode_Args_size depends on runtime parameters */
/* FormatCode_Result_size depends on runtime parameters */
/* FormatPath_Args_size depends on runtime parameters */
/* FormatPath_Result_size depends on runtime parameters */
/* LintPath_Args_size depends on runtime parameters */
/* LintPath_Result_size depends on runtime parameters */
/* OverrideFile_Args_size depends on runtime parameters */
/* OverrideFile_Result_size depends on runtime parameters */
/* VariableList_size depends on runtime parameters */
/* ListVariables_Args_size depends on runtime parameters */
/* ListVariables_Result_size depends on runtime parameters */
/* ListVariables_Result_VariablesEntry_size depends on runtime parameters */
/* Variable_size depends on runtime parameters */
/* MapEntry_size depends on runtime parameters */
/* GetSchemaTypeMapping_Args_size depends on runtime parameters */
/* GetSchemaTypeMapping_Result_size depends on runtime parameters */
/* GetSchemaTypeMapping_Result_SchemaTypeMappingEntry_size depends on runtime parameters */
/* ValidateCode_Args_size depends on runtime parameters */
/* ValidateCode_Result_size depends on runtime parameters */
/* Position_size depends on runtime parameters */
/* ListDepFiles_Args_size depends on runtime parameters */
/* ListDepFiles_Result_size depends on runtime parameters */
/* LoadSettingsFiles_Args_size depends on runtime parameters */
/* LoadSettingsFiles_Result_size depends on runtime parameters */
/* CliConfig_size depends on runtime parameters */
/* KeyValuePair_size depends on runtime parameters */
/* Rename_Args_size depends on runtime parameters */
/* Rename_Result_size depends on runtime parameters */
/* RenameCode_Args_size depends on runtime parameters */
/* RenameCode_Args_SourceCodesEntry_size depends on runtime parameters */
/* RenameCode_Result_size depends on runtime parameters */
/* RenameCode_Result_ChangedCodesEntry_size depends on runtime parameters */
/* Test_Args_size depends on runtime parameters */
/* Test_Result_size depends on runtime parameters */
/* TestCaseInfo_size depends on runtime parameters */
/* UpdateDependencies_Args_size depends on runtime parameters */
/* UpdateDependencies_Result_size depends on runtime parameters */
/* KclType_size depends on runtime parameters */
/* KclType_PropertiesEntry_size depends on runtime parameters */
/* KclType_ExamplesEntry_size depends on runtime parameters */
/* Decorator_size depends on runtime parameters */
/* Decorator_KeywordsEntry_size depends on runtime parameters */
/* Example_size depends on runtime parameters */
#define GetVersion_Args_size                     0
#define ListMethod_Args_size                     0
#define ListVariables_Options_size               2
#define SPEC_PB_H_MAX_SIZE                       ListVariables_Options_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
